import unittest
import basetest
from selenium import webdriver
from time import sleep


class URLParams(basetest.BaseTest):
    def assertCheckbox(self, id, checked):
        box = self.browser.find_element_by_css_selector("div[widgetid='" + id + "'] input")
        self.assertEqual(box.get_attribute('checked'), checked)

    def setUp(self):
        super(URLParams, self).setUp()

    def test_buildURL(self):
        # providers
        self.browser.find_element_by_css_selector('.select-providers-btn').click()
        self.browser.find_element_by_css_selector('.list-picker select.list-box option:first-child').click()
        self.browser.find_element_by_css_selector('.list-picker .buttons-top>span:first-child').click()
        self.browser.find_element_by_css_selector('.list-picker select.list-box option:first-child').click()
        self.browser.find_element_by_css_selector('.list-picker .buttons-top>span:first-child').click()
        self.browser.find_element_by_css_selector('.list-picker .btn-container>span:first-child').click()
        self.browser.find_element_by_css_selector('.mdf-reset-ok-btn').click()
        sleep(1)

        #trans types
        self.browser.find_element_by_css_selector("div[widgetid='cbxWireless']").click()
        self.browser.find_element_by_css_selector("div[widgetid='cbxDSL']").click()

        #speeds
        sliders = self.browser.find_elements_by_css_selector("div.dijitSliderBarContainerH")
        for s in sliders:
            s.click()

        #map extent
        mapDiv = self.browser.find_element_by_css_selector('#map')
        mouse = webdriver.ActionChains(self.browser)
        mouse.click_and_hold(mapDiv)
        mouse.move_by_offset(10, 10)
        mouse.release()
        mouse.perform()

        extent = "extent=185118|4021635|671869|4750539"
        transTypes = "transTypes=40|41|50"
        providers = "providers=AT%26T|Albion"
        speeds = "minDownSpeed=7&minUpSpeed=6"
        sleep(0.5)

        self.assertIn(extent, self.browser.current_url)
        self.assertIn(transTypes, self.browser.current_url)
        self.assertIn(providers, self.browser.current_url)
        self.assertIn(speeds, self.browser.current_url)

    def test_NoTechType(self):
        self.browser.find_element_by_css_selector("div[widgetid='cbxWireless']").click()
        self.browser.find_element_by_css_selector("div[widgetid='cbxWireBased']").click()
        sleep(1)

        self.assertIn('transTypes=-1', self.browser.current_url)

    def test_NoProviders(self):
        self.browser.find_element_by_css_selector("div[widgetid='chbxShowOnly']").click()

        self.assertIn('providers=-1', self.browser.current_url)

    def test_ReadURLParams(self):
        url = self.url + r"#/route/minDownSpeed=4&minUpSpeed=3&transTypes=40|41|10|20|30&providers=All%20West|Baja&extent=406784|4461300|527249|4555471"
        self.browser.get(url)
        self.browser.refresh()

        # sliders
        up = self.browser.execute_script("return AGRC.mapDataFilter.uploadSlider.get('value')")
        self.assertEqual(up, 9)
        down = self.browser.execute_script("return AGRC.mapDataFilter.downloadSlider.get('value')")
        self.assertEqual(down, 8)

        # providers
        radioBtn = self.browser.find_element_by_css_selector("div[widgetid='chbxShowOnly'] input")
        self.assertTrue(radioBtn.is_selected())
        providersList = self.browser.find_element_by_css_selector("ul[data-dojo-attach-point='providerList']")
        self.assertEqual(providersList.value_of_css_property('color'), 'rgba(0, 0, 0, 1)')
        providers = providersList.find_elements_by_css_selector('li')
        self.assertEqual(providers[0].text, 'All West Communications')
        self.assertEqual(providers[1].text, 'Baja Broadband')

        # transTypes
        self.assertCheckbox('cbxCable', 'true')
        self.assertCheckbox('cbxDSL', 'true')
        self.assertCheckbox('cbxFiber', None)
        self.assertCheckbox('cbxWireless', None)
        self.assertCheckbox('cbxFixedWireless', None)
        self.assertCheckbox('cbxMobileWireless', None)

        # map extent
        self.assertEqual(self.browser.execute_script('return AGRC.map.getZoom();'), 4)

    def test_SingleTechType(self):
        url = self.url + r"#/route/minDownSpeed=9&minUpSpeed=10&transTypes=50&providers=Beehive&extent=218902%7C4526654%7C412747%7C4666075"
        self.browser.get(url)
        self.browser.refresh()

        # transTypes
        self.assertCheckbox('cbxCable', None)
        self.assertCheckbox('cbxDSL', None)
        self.assertCheckbox('cbxFiber', 'true')
        self.assertCheckbox('cbxWireless', None)
        self.assertCheckbox('cbxFixedWireless', None)
        self.assertCheckbox('cbxMobileWireless', None)

    def test_singleSpeedSlider(self):
        #speeds
        self.browser.find_elements_by_css_selector("div.dijitSliderBarContainerH")[0].click()
        speeds = "minDownSpeed=7&minUpSpeed=2"
        sleep(2)

        self.assertIn(speeds, self.browser.current_url)


if __name__ == '__main__':
    unittest.main()